pipeline {
  agent any

  environment {
    // TODO: Read from .nvmrc
    NVM_VERSION = '12.0.0'
    PACKAGE_VERSION = ''
  }

  stages {
    stage('Prepare') {
      steps {
        nvm(env.NVM_VERSION) {
          sh 'npm i'
        }
      }
    }

    stage('Lint') {
      steps {
        nvm(env.NVM_VERSION) {
          sh 'npm run prettier && npm run lint'
        }
      }
    }

    stage('Test') {
      steps {
        nvm(env.NVM_VERSION) {
          sh 'npm run test'
        }
      }
    }

    stage('Build') {
      steps {
        nvm(env.NVM_VERSION) {
          sh 'npm run build'
        }
      }
    }

    stage('Version') {
      steps {
        script {
          // Generate build version
          def versionSuffix = ""
          def pkgVersion = sh (
            script: 'git describe --tags $(git rev-list --tags --max-count=1)',
            returnStdout: true
          ).trim()

          echo "Current package version ${pkgVersion}"

          def newPkgVersion = bumpMinorVersion(pkgVersion)
          if (versionSuffix != "") {
              newPkgVersion = newPkgVersion + "-" + versionSuffix
          }

          echo "New package version ${newPkgVersion}"
          env.newPkgVersion = newPkgVersion
        }
        // Add build tag
        withCredentials([usernamePassword(credentialsId: 'gitkennyptprpwd', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
          // TODO: Replace user
          sh "git config --global user.name 'Kennypt'"
          sh "git config --global user.email 'ricardo.pinheiro@mindera.com'"

          sh "git tag -a ${env.newPkgVersion}  -m 'Jenkins'"
          sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Kennypt/nextjs-test.git --tags"
        }
      }
    }

    stage('Package') {
      steps {
        // Generate package
        sh "mkdir -p package"
        sh "tar -czvf ./package/${env.newPkgVersion} ./app/.next"
      }
    }
  }
  post {
    success {
        archiveArtifacts artifacts: 'package/*', onlyIfSuccessful: true
    }
  }
}

// Increment the minor part of a `MAJOR.MINOR.PATCH` semver version.
String bumpMinorVersion(String version) {
    def parts = version.tokenize('.')
    if (parts.size() != 3) {
        error "${version} is not a valid MAJOR.MINOR.PATCH version"
    }
    def newMinorVersion = parts[1].toInteger() + 1

    return "${parts[0]}.${newMinorVersion}.${parts[2]}"
}
